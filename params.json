{"name":"Nginx-upload-progress-module","tagline":"Nginx module implementing an upload progress system, that monitors RFC1867 POST uploads as they are transmitted to upstream servers.","body":"# Nginx Upload Progress Module\r\n============================\r\n[![Build Status](https://travis-ci.org/Tiger66639/nginx-upload-progress-module.svg)](https://travis-ci.org/Tiger66639/nginx-upload-progress-module)\r\n============\r\n\r\nnginx_uploadprogress_module is an implementation of an upload progress system, that monitors\r\nRFC1867 POST upload as they are transmitted to upstream servers.\r\n\r\nIt works by tracking the uploads proxied by Nginx to upstream servers without \r\nanalysing the uploaded content and offers a web API to report upload progress in Javscript, Json or any\r\nother format (through the help of templates).\r\n\r\nIt works because Nginx acts as an accelerator of an upstream server, storing uploaded POST content\r\non disk, before transmitting it to the upstream server. Each individual POST upload request\r\nshould contain a progress unique identifier.\r\n\r\nThis module is Copyright (c) 2007-2012 Brice Figureau, and is licensed under the BSD license (see LICENSE).\r\n * rbtree and shm_zone code is based on Igor Sysoev limit_zone Nginx module.\r\n * expire header code is based on Igor Sysoev header_filter Nginx module.\r\n\r\nThe JSON idea and the mechanism idea are based on Lighttpd mod_uploadprogress:\r\nhttp://blog.lighttpd.net/articles/2006/08/01/mod_uploadprogress-is-back\r\n\r\n\r\nWARNING: \r\n * when compiled with --with-debug, this module will produce high number of log messages.\r\n\r\nINCOMPATIBLE CHANGES\r\n====================\r\n\r\nv0.9.0:\r\n\r\nJSONP is now the default output of the progress probes. If you rely on this module serving\r\nthe deprecated java output use:\r\n     upload_progress_java_output\r\nin the progress probe location.\r\n\r\n\r\nInstallation\r\n============\r\n\r\nnginx_uploadprogress_module has been tested with Nginx 0.6.x, 0.7.x, 0.8.x and 1.0.x.\r\n\r\nDownload the Nginx sources from http://nginx.net/ and unpack it.\r\n\r\nTo build Nginx, change to the directory which contains the Nginx\r\nsources, and run the configuration script making sure to add the path\r\nto the nginx_uploadprogress_module sources using the --add-module option: ::\r\n\r\n $ ./configure --add-module=/path/to/nginx_uploadprogress_module/\r\n\r\nNow you can build and install the software:\r\n\r\n $ make\r\n\r\nand as root:\r\n\r\n $ make install \r\n \r\n \r\nConfiguration\r\n=============\r\n\r\nEach upload request should be assigned a unique identifier. This unique identifier will be used\r\nto store the request and reference it to report.\r\nThis identifier can be transmitted either as a GET argument or as an HTTP header whose name is X-Progress-ID.\r\n\r\nupload_progress\r\n+++++++++++++++\r\n    :Syntax: upload_progress <zone_name> <zone_size>\r\n    :Default: none\r\n    :Context: http\r\n    :Description:\r\n    This directive enables the upload progress module and reserve <zone_size> bytes to the <zone_name> which\r\n    will be used to store the per-connection tracking information.\r\n    \r\ntrack_uploads\r\n+++++++++++++\r\n    :Syntax: track_uploads <zone_name> <timeout>\r\n    :Default: none\r\n    :Context: location\r\n    :Description:\r\n    This directive enables tracking uploads for the current location. Each POST landing in this location will register\r\n    the request in the <zone_name> upload progress tracker.\r\n    Since Nginx doesn't support yet RFC 1867 upload, the location must be a proxy_pass or fastcgi location.\r\n    The POST _must_ have a query parameter called X-Progress-ID (or an HTTP header of the same name) whose value is the\r\n    unique identifier used to get progress information. If the POST has no such information, the upload will not be tracked.\r\n    The tracked connections are kept at most <timeout> seconds after they have been finished to be able to serve \r\n    useful information to upload progress probes.\r\n    WARNING: this directive must be the last directive of the location. It must be in a proxy_pass or \r\n    fastcgi_pass location.\r\n    \r\nreport_uploads\r\n++++++++++++++\r\n    :Syntax: report_uploads <zone_name>\r\n    :Default: none\r\n    :Context: location\r\n    :Description:\r\n    This directive allows a location to report the upload progress that is tracked by track_uploads for <zone_name>.\r\n    The returned document is a Javascript text with the possible 4 results by default:\r\n      * the upload request hasn't been registered yet or is unknown:             \r\n                new Object({ 'state' : 'starting' })\r\n                \r\n        * the upload request has ended:\r\n                new Object({ 'state' : 'done' })\r\n        \r\n        * the upload request generated an HTTP error\r\n                new Object({ 'state' : 'error', 'status' : <error code> })\r\n            one error code that can be of use to track for the client is 413 (request entity too large).\r\n        \r\n        * the upload request is in progress:\r\n                new Object({ 'state' : 'uploading', 'received' : <size_received>, 'size' : <total_size>})\r\n    \r\n    It is possible to return pure json instead of this javascript (see upload_progress_json_output).\r\n    It is also possible to configure completely the response format with the directive:\r\n            upload_progress_template\r\n\r\n    The HTTP request to this location must have a X-Progress-ID parameter or HTTP header containing a valid\r\n    unique identifier of an in progress upload.\r\n\r\nupload_progress_content_type\r\n++++++++++++++++++++++++++++\r\n    :Syntax: upload_progress_content_type <content_type>\r\n    :Default: text/javascript\r\n    :Context: location\r\n    :Description:\r\n    This directive allows to change the upload progress probe response content-type.\r\n\r\nupload_progress_header\r\n++++++++++++++++++++++\r\n    :Syntax: upload_progress_header <progress-id>\r\n    :Default: X-Progress-ID\r\n    :Context: location\r\n    :Description:\r\n    This directive allows to change the header name of the progress ID.\r\n\r\nupload_progress_jsonp_parameter\r\n++++++++++++++++++++++\r\n    :Syntax: upload_progress_jsonp_parameter <callback_parameter>\r\n    :Default: callback\r\n    :Context: location\r\n    :Description:\r\n    This directive allows to change the name of the GET parameter with the jsonp callback name.\r\n\r\nupload_progress_java_output\r\n+++++++++++++++++++++++++++\r\n    :Syntax: upload_progress_java_output\r\n    :Default: N/A\r\n    :Context: location\r\n    :Description:\r\n    This directive sets everything to output as eval() javascript compatible code.\r\n\r\nupload_progress_json_output\r\n+++++++++++++++++++++++++++\r\n    :Syntax: upload_progress_json_output\r\n    :Default: N/A\r\n    :Context: location\r\n    :Description:\r\n    This directive sets everything to output as pure json.\r\n\r\nupload_progress_jsonp_output\r\n++++++++++++++++++++++++++++\r\n    :Syntax: upload_progress_jsonp_output\r\n    :Default: N/A\r\n    :Context: location\r\n    :Description:\r\n    This directive sets everything to output as jsonp (like json output, but with callback).\r\n\r\nupload_progress_template\r\n++++++++++++++++++++++++\r\n    :Syntax: upload_progress_template <state> <template>\r\n    :Default: none\r\n    :Context: location\r\n    :Description:\r\n    This directive can be used to install a progress response template.\r\n    The available list of state is:\r\n        * starting\r\n        * uploading\r\n        * error\r\n        * done\r\n\r\n    Nginx will replace the value of the following variables with their respective\r\n    value for the upload:\r\n        * $uploadprogress_length: total size of the upload\r\n        * $uploadprogress_received: what the server has received so far\r\n        * $uploadprogress_status: error code in case of HTTP error\r\n        * $uploadprogress_callback: jsonp callback name if provided as a GET query parameter with name 'callback'\r\n    \r\n    For instance to return XML (instead of the default Javascript or json):\r\n\r\n    upload_progress_content_type 'text/xml';\r\n    upload_progress_template starting '<upload><state>starting</state></upload>';\r\n    upload_progress_template uploading '<upload><state>uploading</state><size>$uploadprogress_length</size><uploaded>$uploadprogress_received</uploaded></upload>';\r\n    upload_progress_template done '<upload><state>done</state></upload>';\r\n    upload_progress_template error '<upload><state>error</state><code>$uploadprogress_status</code></upload>';\r\n\r\n    Example of jsonp response:\r\n\r\n    upload_progress_template starting \"$uploadprogress_callback({ \\\"state\\\" : \\\"starting\\\"});\";\r\n    upload_progress_template error \"$uploadprogress_callback({ \\\"state\\\" : \\\"error\\\", \\\"status\\\" : $uploadprogress_status });\";\r\n    upload_progress_template done \"$uploadprogress_callback({ \\\"state\\\" : \\\"done\\\"});\";\r\n    upload_progress_template uploading \"$uploadprogress_callback({ \\\"state\\\" : \\\"uploading\\\", \\\"received\\\" : $uploadprogress_received, \\\"size\\\" : $uploadprogress_length });\";\r\n\r\nConfiguration Example:\r\n+++++++++++++++++++++\r\n\r\nhttp {\r\n    \r\n    # reserve 1MB under the name 'proxied' to track uploads\r\n    upload_progress proxied 1m;\r\n\r\n  server {\r\n        listen       127.0.0.1 default;\r\n        server_name  _ *;\r\n        \r\n        root /path/to/root;\r\n        \r\n        location / {\r\n            # proxy to upstream server\r\n            proxy_pass http://127.0.0.1;\r\n            proxy_redirect default;\r\n            \r\n            # track uploads in the 'proxied' zone\r\n            # remember connections for 30s after they finished\r\n            track_uploads proxied 30s;\r\n        }\r\n        \r\n        location ^~ /progress {\r\n            # report uploads tracked in the 'proxied' zone\r\n            report_uploads proxied;\r\n        }\r\n}\r\n    \r\n\r\nUsage Example\r\n=============\r\n\r\n(based on Lighttd mod_uploadprogress module example):\r\n\r\nFirst we need a upload form:\r\n\r\n  <form id=\"upload\" enctype=\"multipart/form-data\" \r\n    action=\"/upload.php\" method=\"post\" \r\n    onsubmit=\"openProgressBar(); return true;\">\r\n  <input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"30000000\"  />\r\n  <input name=\"userfile\" type=\"file\" label=\"fileupload\" />\r\n  <input type=\"submit\" value=\"Send File\" />\r\n  </form>\r\n\r\nAnd a progress bar to visualize the progress:\r\n\r\n  <div>\r\n   <div id=\"progress\" style=\"width: 400px; border: 1px solid black\">\r\n    <div id=\"progressbar\" \r\n       style=\"width: 1px; background-color: black; border: 1px solid white\">\r\n     &nbsp;\r\n    </div>\r\n   </div>\r\n   <div id=\"tp\">(progress)</div>\r\n  </div>\r\n\r\nThen we need to generate the Unique Identifier and launch the upload on submit\r\naction. This also will start the ajax progress report mechanism.\r\n\r\n interval = null;\r\n\r\nfunction openProgressBar() {\r\n /* generate random progress-id */\r\n uuid = \"\";\r\n for (i = 0; i < 32; i++) {\r\n  uuid += Math.floor(Math.random() * 16).toString(16);\r\n }\r\n /* patch the form-action tag to include the progress-id */\r\n document.getElementById(\"upload\").action=\"/upload.php?X-Progress-ID=\" + uuid;\r\n\r\n /* call the progress-updater every 1000ms */\r\n interval = window.setInterval(\r\n   function () {\r\n     fetch(uuid);\r\n   },\r\n   1000\r\n );\r\n}\r\n\r\nfunction fetch(uuid) {\r\n req = new XMLHttpRequest();\r\n req.open(\"GET\", \"/progress\", 1);\r\n req.setRequestHeader(\"X-Progress-ID\", uuid);\r\n req.onreadystatechange = function () {\r\n  if (req.readyState == 4) {\r\n   if (req.status == 200) {\r\n    /* poor-man JSON parser */\r\n    var upload = eval(req.responseText);\r\n\r\n    document.getElementById('tp').innerHTML = upload.state;\r\n\r\n    /* change the width if the inner progress-bar */\r\n    if (upload.state == 'done' || upload.state == 'uploading') {\r\n     bar = document.getElementById('progressbar');\r\n     w = 400 * upload.received / upload.size;\r\n     bar.style.width = w + 'px';\r\n    }\r\n    /* we are done, stop the interval */\r\n    if (upload.state == 'done') {\r\n     window.clearTimeout(interval);\r\n    }\r\n   }\r\n  }\r\n }\r\n req.send(null);\r\n}\r\n\r\nCompanion Software\r\n==================\r\n\r\nThis software can also work with Valery Kholodkov' Nginx Upload Module:\r\nhttp://www.grid.net.ru/nginx/upload.en.html\r\n\r\nYou can also use the following javascript libraries client side:\r\nhttp://drogomir.com/blog/2008/6/30/upload-progress-script-with-safari-support\r\n\r\nNote that when using jQuery AJAX for progress monitoring, such as:\r\nhttps://github.com/drogus/jquery-upload-progress\r\nyou should be sure to set a upload_progress template parameter:\r\nupload_progress_json_output\r\nor\r\nupload_progress_jsonp_output\r\ndepending on your jQuery AJAX dataType setting.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}